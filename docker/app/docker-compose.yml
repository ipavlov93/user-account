version: "3.7"

services:
  user-account-api:
    container_name: user-account-api
    build:
      context: ../..
      dockerfile: docker/app/Dockerfile
    ports:
      - ${HTTP_SERVER_PORT}:${HTTP_SERVER_PORT}
    restart: on-failure
    depends_on:
      user-account-db:
        condition: service_healthy
    environment:
      - HTTP_SERVER_PORT=${HTTP_SERVER_PORT}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=user-account-db
      - DB_PORT=${DB_PORT}
      - DB_OPTION=${DB_OPTION}
#    healthcheck:
#      test: CMD-SHELL curl --fail http://localhost:"$$HTTP_SERVER_PORT"/health ||
#               curl --fail http://localhost:$$HTTP_SERVER_PORT ||
#                exit 1
#      test: [
#        "CMD-SHELL",
#        "curl --fail http://localhost:${HTTP_SERVER_PORT}/health ||
#         curl --fail http://localhost:${HTTP_SERVER_PORT} ||
#          exit 1" ]
#      interval: 3s
#      timeout: 5s
#      retries: 3
    networks:
      - user-account-network
  #  user-account-migrator:
  #    container_name: user-account-migrator
  #    build:
  #      context: ../..
  #      dockerfile: Dockerfile.migrator
  #    restart: on-failure
  #    depends_on:
  #  depends_on:
  #    user-account-api:
  #    user-account-db:
  #      condition: service_healthy
  #    environment:
  #      - GOOSE_DRIVER=${GOOSE_DRIVER}
  #      - GOOSE_MIGRATION_DIR=${GOOSE_MIGRATION_DIR}
  #      - GOOSE_DBSTRING=${GOOSE_DBSTRING}
  #      - DB_NAME=${DB_NAME}
  #      - DB_USER=${DB_USER}
  #      - DB_PASSWORD=${DB_PASSWORD}
  #      - DB_HOST=user-account-db
  #      - DB_PORT=${DB_PORT}
  #      - DB_OPTION=${DB_OPTION}
  #    networks:
  #      - user-account-network
  user-account-db:
    image: postgres:15
    container_name: user-account_db
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready || exit 1" ]
#      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME} || exit 1" ]
#      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 3s
      timeout: 5s
      retries: 3
    restart: always
    volumes:
      - ./docker-init-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh:ro
      - ../../internal/migrations/postgres:/docker-entrypoint-initdb.d/migrations:ro
      - database_postgres:/var/lib/postgresql/data
    networks:
      - user-account-network

volumes:
  database_postgres:

networks:
  user-account-network:
    driver: bridge
